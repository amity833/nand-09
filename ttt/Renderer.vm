function Renderer.new 0
push constant 1
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push pointer 0
return
function Renderer.draw 6
push argument 0
pop pointer 0
push this 0
call Board.getSize 1
pop local 0
push argument 1
push argument 2
push argument 3
push local 0
push constant 5
push constant 0
not
call DrawHelper.drawG 6
pop temp 0
push constant 0
pop local 1
push constant 0
pop local 2
push this 0
call Board.getData 1
pop local 5
label WHILE_EXP0
push local 1
push local 0
lt
not
if-goto WHILE_END0
push local 1
push local 5
add
pop pointer 1
push that 0
pop local 4
label WHILE_EXP1
push local 2
push local 0
lt
not
if-goto WHILE_END1
push local 2
push local 4
add
pop pointer 1
push that 0
pop local 3
push local 3
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push local 1
push argument 3
call Math.multiply 2
push local 0
call Math.divide 2
add
push argument 2
push local 2
push argument 3
call Math.multiply 2
push local 0
call Math.divide 2
add
push argument 3
push local 0
call Math.divide 2
push constant 5
push constant 0
not
call DrawHelper.drawX 5
pop temp 0
label IF_FALSE0
push local 3
push constant 1
neg
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push local 1
push argument 3
call Math.multiply 2
push local 0
call Math.divide 2
add
push argument 2
push local 2
push argument 3
call Math.multiply 2
push local 0
call Math.divide 2
add
push argument 3
push local 0
call Math.divide 2
push constant 5
push constant 0
not
call DrawHelper.drawO 5
pop temp 0
label IF_FALSE1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 50
push constant 50
push constant 25
push constant 5
push constant 0
not
call DrawHelper.drawO 5
pop temp 0
push constant 50
push constant 50
push constant 50
push constant 5
push constant 0
not
call DrawHelper.drawX 5
pop temp 0
push constant 0
return
